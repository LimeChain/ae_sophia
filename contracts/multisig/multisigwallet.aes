contract Voting =
    public function vote   : () => bool
    public function revoke : () => bool
    public function result : () => int

contract MultiSigWallet =
    record state = { 
        owner                    : address,
        configured               : bool, 
        ownersCount              : int,
        transactionsCount        : int,
        required                 : int,
        mapOwners                   : map(int, address),
        mapOwnerIndex               : map(address, int),
        transactions             : map(int, transaction),
        removeOwnerVotes         : map(address, int),
        addOwnerVotes            : map(address, int),
        removeOwnerConfirmations : map((address,address), bool), // map(address, map(address, bool)),
        addOwnerConfirmations    : map((address,address), bool), // map((address,address), int) newOwner | currentOwner | true/false
        changeRequirementVotes : map((int,address), bool), // map((new_required, owner_address), vote_decision)
        changeRequirementConfirmations : map(int, int), // map(new_required, current_positive_votes)
        txConfirmations          : map((int,address), bool)} // map(int, map(address, bool))
    
    record transaction = { 
        id            : int,
        confirmations : int,
        method        : string}

    datatype method = 
        Vote   |  
        Revoke | 
        Result
          
    public stateful function init() = 
        { required                 = 1,
          owner                    = Call.caller,
          configured               = false,
          ownersCount              = 0,
          transactionsCount        = 0,
          mapOwners                   = {},
          mapOwnerIndex               = {},
          transactions             = {},
          removeOwnerVotes              = {},
          addOwnerVotes                 = {},
          txConfirmations          = {},
          addOwnerConfirmations    = {},
          removeOwnerConfirmations = {},
          changeRequirementVotes = {},
          changeRequirementConfirmations = {}}

    public stateful function initOwner(owner : address) = 
        onlyOwner()
        onlyNotConfigured()

        addNewOwner(owner)

    public stateful function configure() = 
        onlyOwner()
        require(state.required =< state.ownersCount, "'Required' should be lower than owners count!")

        put(state{configured = true})

    public stateful function voteChangeRequirement(_newRequired: int, _vote: bool) =
        onlyOwners()
        // validate requirements
        validateRequirement(_newRequired, state.ownersCount)
        // is caller already voted
        hasVotedForRequirementChange(_newRequired, Call.caller)

        put(state{changeRequirementVotes[(_newRequired, Call.caller)] = true})

        if(_vote)
            put(state{changeRequirementConfirmations[_newRequired] = getRequirementConfirmations(_newRequired) + 1})

        if(getRequirementConfirmations(_newRequired) >= state.required)
            put(state{changeRequirementConfirmations[_newRequired] = 0})
            put(state{required = _newRequired})
            reInitRequirementVote(_newRequired, 1, state.ownersCount)

    public function get() : int =
        state.required

    public stateful function voteAddOwner(owner : address) =
        onlyConfigured()
        onlyOwners()
        isNotOwner(owner)
        hasVotedForOwnerAddition(owner)
        
        put(state{addOwnerVotes[owner] = getValueAddressInt(owner, state.addOwnerVotes) + 1})
        put(state{addOwnerConfirmations[(owner,Call.caller)] = true}) // set this value to true because current owner make a vote 

        if(getValueAddressInt(owner, state.addOwnerVotes) >= state.required)
            addNewOwner(owner)
            
    public stateful function voteRemoveOwner(owner : address) =
        onlyConfigured()
        onlyOwners()
        isOwnerExists(owner)
        hasVotedForOwnerRemoval(owner)
        
        put(state{removeOwnerVotes[owner] = getValueAddressInt(owner, state.removeOwnerVotes) + 1})
        put(state{removeOwnerConfirmations[(owner,Call.caller)] = true})

        if(getValueAddressInt(owner, state.removeOwnerVotes) >= state.required)
            removeOwner(owner)

    public function getConfirmations(txId : int) : int =
        onlyConfigured()

        state.transactions[txId].confirmations

    public stateful function addTransaction(method : string) : int = 
        onlyConfigured()
        onlyOwners()
        require(validateMethodName(method), "Invalid method name.")

        let tx : transaction = {
            id             = state.transactionsCount,
            confirmations  = 0,
            method         = method}

        put(state{transactions = state.transactions{[state.transactionsCount] = tx}})
        put(state{transactionsCount = state.transactionsCount + 1})  

        tx.id

    public stateful function approve(txId : int, votingContract : Voting) = // pass contract address
        onlyConfigured()
        onlyOwners()
        //require(!getValueFromMapTupleIntAddress(txId, Call.caller, state.txConfirmations), "Your vote has been already submitted.")
        hasVotedTxApproved(txId)

        let transaction : transaction = state.transactions[txId]

        let transaction' = transaction { 
            id = transaction.id, 
            confirmations = transaction.confirmations + 1, 
            method = transaction.method }

        put(state{txConfirmations[(txId,Call.caller)] = true})
        put(state{transactions = state.transactions{[txId] = transaction'}})

        // if there are needed votes execute tx
        if(transaction'.confirmations >= state.required)
            executeTransaction(txId, votingContract)

    private stateful function executeTransaction(txId : int, votingContract : Voting) = 
        onlyConfigured()
        onlyOwners()
        validRequirement()

        let transaction : transaction = state.transactions[txId]
        require(transaction.confirmations >= state.required, "Not enough votes!")
        
        switch(transaction.method)
            "Vote"   => votingContract.vote()
            "Revoke" => votingContract.revoke()

        let transaction' = transaction { 
            id = transaction.id, 
            confirmations = 0, 
            method = transaction.method }
    
        put(state{transactions = state.transactions{[txId] = transaction'}})

        reInitApproveTxVote(txId, 1, state.ownersCount)

    private function validateMethodName(method: string) : bool =
        switch(method)
            "Vote" => true
            "Revoke" => true
            _    => false

    private stateful function addNewOwner(owner : address) =
        require(owner != Contract.address, "Address can't be same as contract address")
          
        put(state{addOwnerVotes[owner] = 0})
        put(state{ownersCount = state.ownersCount + 1})    
        put(state{mapOwners = state.mapOwners{[state.ownersCount] = owner}})
        put(state{mapOwnerIndex = state.mapOwnerIndex{[owner] = state.ownersCount}})

        reInitAddOwnerVote(owner, 1, state.ownersCount)

    private function onlyOwner() =
        require(Call.caller == state.owner, "Only owner")
        
    private function onlyOwners() =
        require(lookupByAddress(Call.caller, state.mapOwnerIndex, 0) != 0, "Only owners")

    private function lookupByAddress(key : address, _map, defaultValue : int) =
        switch(Map.lookup(key, _map))
            None    => defaultValue
            Some(x) => x

    private function lookupById(k : int, m, v) =
        switch(Map.lookup(k, m))
            None    => v
            Some(x) => x

    private function validRequirement() =
        require(state.ownersCount > 0, "Owners count should be greater than zero")
        require(state.ownersCount =< state.required, "Owners count can't be greater than required")
        require(state.required > 0, "Required should be greater than zeo")

    private function onlyNotConfigured() =
        require(!state.configured, "Only not configured")

    private function onlyConfigured() =
        require(state.configured, "Only configured")

    private function require(expression : bool, err : string) =
        if(!expression) 
            abort(err)

    private function add(_a : int, _b : int) : int =
        let c : int = _a + _b
        require(c >= _a, "Math Error")
        c

    private function sub(_a : int, _b : int) : int =
        require(_b =< _a, "Math Error")
        _a - _b

    private function getValueFromMapTuple(newOwner : address, currentOwner : address, _map) : bool =
        switch(Map.lookup((newOwner, currentOwner), _map))
            None    => false
            Some(x) => x

    private function getValueFromMapTupleIntAddress(txId : int, currentOwner : address, _map) : bool =
        switch(Map.lookup((txId, currentOwner), _map))
            None    => false
            Some(x) => x

    private function getValueAddressInt(newOwner : address, _map) : int =
        switch(Map.lookup(newOwner, _map))
            None    => 0
            Some(x) => x

    public function isOwnerExists(_owner : address) : int =
        let index = 
            switch (Map.lookup(_owner, state.mapOwnerIndex))
                None => 0
                Some(x) => x

        require(index > 0, "Address is not an owner!")

        index

    private function calculateMinimumRequired(currentRequire) : int =
        switch(currentRequire =< 1)
            true => 1
            false => currentRequire - 1

    private function validateRequirement(_required: int, ownerCount: int) : bool =
        require(_required =< ownerCount && _required > 0 && ownerCount > 0, "Invalid requirements.")
        true
    
    private function isOwnerVotedForRequirement(_newRequired: int, _voter : address) : bool = 
        switch(Map.lookup((_newRequired, _voter), state.changeRequirementVotes))
                None    => false
                Some(x) => x

    private function reInitRequirementVote(_required : int, currentOwnerIndex : int, maxIndex : int ) = 
        if(currentOwnerIndex =< maxIndex)
            put(state{changeRequirementVotes[(_required, state.mapOwners[currentOwnerIndex])] = false})
            Map.delete((_required, state.mapOwners[currentOwnerIndex]), state.changeRequirementVotes)
            reInitRequirementVote(_required, currentOwnerIndex + 1, maxIndex)

    private function reInitAddOwnerVote(_owner : address, _currentOwnerIndex : int, maxIndex : int) = 
        if(_currentOwnerIndex =< maxIndex)
            put(state{addOwnerConfirmations[(_owner, state.mapOwners[_currentOwnerIndex])] = false})
            Map.delete((_owner, state.mapOwners[_currentOwnerIndex]), state.addOwnerConfirmations)
            reInitAddOwnerVote(_owner, _currentOwnerIndex + 1, maxIndex)

    private function reInitRemoveOwnerVote(_owner : address, _currentOwnerIndex : int, maxIndex : int) = 
        if(_currentOwnerIndex =< maxIndex)
            put(state{removeOwnerConfirmations[(_owner, state.mapOwners[_currentOwnerIndex])] = false})
            Map.delete((_owner, state.mapOwners[_currentOwnerIndex]), state.removeOwnerConfirmations)
            reInitRemoveOwnerVote(_owner, _currentOwnerIndex + 1, maxIndex)

    private function reInitApproveTxVote(_txId : int, currentOwnerIndex : int, maxIndex : int ) = 
        if(currentOwnerIndex =< maxIndex)
            put(state{txConfirmations[(_txId,state.mapOwners[currentOwnerIndex])] = false})
            Map.delete((_txId, state.mapOwners[currentOwnerIndex]), state.txConfirmations)
            reInitApproveTxVote(_txId, currentOwnerIndex + 1, maxIndex)

    private function hasVotedForRequirementChange(_newRequired : int, caller : address) =
        require(!isOwnerVotedForRequirement(_newRequired, caller), "Your vote has been already submitted.")

    private function getRequirementConfirmations(key : int) : int =
        switch(Map.lookup(key, state.changeRequirementConfirmations))
            None    => 0
            Some(x) => x

    private function isNotOwner(_newOwner: address) =
        let index =
            switch(Map.lookup(_newOwner, state.mapOwnerIndex))
                None => 0
                Some(x) => x

        require(index == 0, "Suggested owner is already owner!")

    private function hasVotedForOwnerAddition(owner : address) =
        require(!getValueFromMapTuple(owner, Call.caller, state.addOwnerConfirmations), "Your vote has been already submitted.")

    private function hasVotedForOwnerRemoval(owner: address) =
        require(!getValueFromMapTuple(owner, Call.caller, state.removeOwnerConfirmations), "Your vote has been already submitted.")

    private function hasEnoughRemoveVotes(owner: address) =
        require(getValueAddressInt(owner, state.removeOwnerVotes) >= state.required, "Not enough votes!")

    private stateful function removeOwner(owner : address) =
        onlyConfigured()
        onlyOwners()
        //require(getValueAddressInt(owner, state.removeOwnerVotes) >= state.required, "Not enough votes!")
        hasEnoughRemoveVotes(owner)

        // swap last owner with deleted one
        let _ownerIndex = state.mapOwnerIndex[owner]
        let lastAddedOwner = state.mapOwners[state.ownersCount]
        put(state{mapOwnerIndex[lastAddedOwner] = _ownerIndex})
        put(state{mapOwners[_ownerIndex] = lastAddedOwner})

        // Map.delete is not working correctly
        put(state{mapOwnerIndex[owner] = 0}) 
        put(state{removeOwnerVotes[owner] = 0})

        Map.delete(owner, state.removeOwnerVotes)
        Map.delete(owner, state.mapOwnerIndex)
        put(state{ownersCount = state.ownersCount - 1})    
        put(state{required = calculateMinimumRequired(state.required)})

        reInitRemoveOwnerVote(owner, 1, state.ownersCount)

    private function hasVotedTxApproved(txId: int) =
        require(!getValueFromMapTupleIntAddress(txId, Call.caller, state.txConfirmations), "Your vote has been already submitted.")