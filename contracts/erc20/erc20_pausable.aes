contract ERC20 =
  record state = {
    _owner            : address, 
    _totalSupply      : int,
    _balances         : map(address, int),
    _allowed          : map((address,address), int),
    _paused           : bool}

  public stateful function init() = {
    _owner = Call.caller,
    _totalSupply = 0,
    _balances = {},
    _allowed = {},
    _paused = false}

  private function lookupByAddress(k : address, m, v) =
  	switch(Map.lookup(k, m))
	    None    => v
	    Some(x) => x

  public function paused() : bool = state._paused

  public function totalSupply() : int = state._totalSupply

  public function balanceOf(who: address) : int = lookupByAddress(who, state._balances, 0)

  public function allowance(owner: address, spender: address) : int = 
    switch(Map.lookup((owner, spender), state._allowed))
	    None    => 0
	    Some(x) => x

  public stateful function transfer(to: address, value: int) : bool =
    require(!state._paused, "Contract is paused")
    _transfer(Call.caller, to, value)

  public stateful function approve(spender: address, value: int) : bool = 
    require(!state._paused, "Contract is paused")
    require(value > 0, "Value is sub zero")
    require(spender != #0, "Invalid spender address")

    put(state{_allowed[(Call.caller,spender)] = value})

    true

  private stateful function _transfer(from: address, to: address, value: int) : bool =
    require(value > 0, "Value is sub zero")
    require((value =< balanceOf(from)), "Not enough balance")
    require(to != #0, "Invalid address")

    put(state{
      _balances[from] = sub(state._balances[from], value),
      _balances[to] = add(state._balances[to], value)})

    true

  public stateful function transferFrom(from: address, to: address, value: int) : bool =
    require(!state._paused, "Contract is paused")
    state{_allowed[(from,Call.caller)] = sub(state._allowed[(from,Call.caller)], value)}
    _transfer(Call.caller, to, value)

    true

  public stateful function increaseAllowance(spender: address, addedValue: int) : bool =
    require(!state._paused, "Contract is paused")
    require(spender != #0, "Invalid address")
    state{_allowed[(Call.caller, spender)] = add(state._allowed[(Call.caller,spender)], addedValue)}

    true

  public stateful function decreaseAllowance(spender: address, subtractedValue: int) : bool =
    require(!state._paused, "Contract is paused")
    require(spender != #0, "Invalid address")
    state{_allowed[(Call.caller,spender)] = sub(state._allowed[(Call.caller,spender)], subtractedValue)}

    true

  public stateful function _mint(account: address, value: int) : bool =
    require(!state._paused, "Contract is paused")
    onlyOwner(Call.caller)
    require(account != #0, "Invalid address")

    state{_totalSupply = add(state._totalSupply, value),
          _balances[account] = add(state._balances[account], value)}

    true

  public stateful function _burn(account: address, value: int) : bool =
    require(!state._paused, "Contract is paused")
    onlyOwner(Call.caller)
    require(account != #0, "Invalid address")

    state{_totalSupply = sub(state._totalSupply, value),
          _balances[account] = sub(state._balances[account], value)}

    true

  public stateful function _burnFrom(account: address, value: int) : bool =
    require(!state._paused, "Contract is paused")
    onlyOwner(Call.caller)
    require(account != #0, "Invalid address")

    state{_allowed[(account,Call.caller)] = sub(state._allowed[(account,Call.caller)], value)}
    _burn(account, value)

    true
  
  public stateful function pause() : bool = 
    onlyOwner(Call.caller)
    state{_paused = true}

    true

  public stateful function unpause() : bool = 
    onlyOwner(Call.caller)
    state{_paused = true}

    true

  private function add(_a : int, _b : int) : int =
    let c : int = _a + _b
    require(c >= _a, "Error")
    c

  private function sub(_a : int, _b : int) : int =
    require(_b =< _a, "Error")
    _a - _b

  private function require(b : bool, err : string) =
    if(!b) 
      abort(err)

  private function onlyOwner(owner : address) =
      require(owner == state._owner, "Only owner can mint!")