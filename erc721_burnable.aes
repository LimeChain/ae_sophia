contract ERC721 =
  record state = { 
    name              : string,
    symbol            : string,
    owner             : address,
    ownedTokensCount  : map(address, int),
    tokenOwner        : map(int, address),
    tokenApprovals    : map(int, address),
    operatorApprovals : map(address, map(address, bool))}

  //todo repalce {} with Map.empty
  public stateful function  init(name : string, symbol : string) = {
  	name = name,
  	symbol = symbol,
    owner = Call.caller,
  	ownedTokensCount = {},
  	tokenOwner = {},
  	tokenApprovals = {},
    operatorApprovals = {}}

  public function name() : string = state.name
  public function symbol() : string = state.symbol
  public function balanceOf(tokenOwner : address) : int = lookupByAddress(tokenOwner, state.ownedTokensCount, 0)
  public function ownerOf(tokenId : int) = lookupById(tokenId, state.tokenOwner, #0)
  public function getApproved(tokenId : int) : address = lookupById(tokenId, state.tokenApprovals, #0)
  public function isApprovedForAll(owner : address, operator : address) : bool = state.operatorApprovals[owner][operator]

  public stateful function burn(tokenId : int) : bool = 
    onlyTokenOwner(Call.caller, tokenId) 
    removeTokenFrom(Call.caller, tokenId)
    true

   public stateful function approve(tokenId : int, to : address) : bool =
    let owner : address = ownerOf(tokenId)
    
    require(to != Call.caller, "Receiver can't be same as sender")
    require(Call.caller == owner || isApprovedForAll(owner, Call.caller), "Not owner or not approved")
    
    put(state{tokenApprovals = state.tokenApprovals{[tokenId] = to}})

    true

  public stateful function transferFrom(from : address, to : address, tokenId : int) : bool =
    require(isApprovedOrOwner(Call.caller, tokenId), "Caller isn't approved or owner")
    
    clearApproval(from, tokenId)
    removeTokenFrom(from, tokenId)
    addTokenTo(to, tokenId)

    true

  public stateful function setApprovalForAll(to : address, approved : bool) : bool =
    ensureAllowed(Call.caller)
    put(state{operatorApprovals[Call.caller][to] = approved})
    true
  
  private function checkTokenExists(tokenId : int) : bool =
    switch(Map.lookup(tokenId, state.tokenOwner))
      None    => false
      Some(x) => true

  private function ensureAllowed(key : address) =
    switch(Map.lookup(key, state.operatorApprovals))
      None => put(state{operatorApprovals[key] = {}})
      Some(_) => ()

  private stateful function addTokenTo(to : address, tokenId : int) = 
    put(state{tokenOwner = state.tokenOwner{[tokenId] = to}})
    put(state{ownedTokensCount[to] = add(lookupByAddress(to, state.ownedTokensCount, 0), 1)})

  private stateful function removeTokenFrom(from : address, tokenId : int) =
    put(state{tokenOwner = state.tokenOwner{[tokenId] = #0}})
    put(state{ownedTokensCount[from] = sub(lookupByAddress(from, state.ownedTokensCount, 0), 1)})

  private stateful function clearApproval(from : address, tokenId : int) : bool = 
    put(state{tokenApprovals = state.tokenApprovals{[tokenId] = #0}})
    true

  private function lookupByAddress(k : address, m, v) =
  	switch(Map.lookup(k, m))
	    None    => v
	    Some(x) => x

  private function lookupById(k : int, m, v) =
  	switch(Map.lookup(k, m))
	    None    => v
	    Some(x) => x

  private function add(_a : int, _b : int) : int =
    let c : int = _a + _b
    require(c >= _a, "Error")
    c

  private function sub(_a : int, _b : int) : int =
    require(_b =< _a, "Error")
    _a - _b

  //todo use native abort!!
  private function abort(err) = abort(err)

  private function require(b : bool, err : string) =
    if(!b) 
      abort(err)

  private function onlyOwner(owner : address) =
    if(owner != state.owner) 
      abort("Only owner can mint!")

  private function onlyTokenOwner(owner : address, tokenId : int) =
    if(owner != lookupById(tokenId, state.tokenOwner, #0)) 
      abort("Only token owner can transfer!")

  private function isApprovedOrOwner(spender : address, tokenId : int) : bool = 
    let owner : address = ownerOf(tokenId)
    getApproved(tokenId) == spender || owner == spender || isApprovedForAll(owner, spender)